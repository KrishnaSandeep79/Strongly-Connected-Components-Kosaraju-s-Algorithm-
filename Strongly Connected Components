#include<stdio.h>
#include<stdlib.h>
#define MAX 20

int top=-1,G1[MAX][MAX],G[MAX][MAX],s[MAX],visited[MAX],n;

void push(int x)
{
    if(!is_full())
    {
        s[++top]=x;
    }
}

int pop()
{
    int x;
    if(!is_empty())
    {
        x=s[top];
        top--;
    }
    return x;
}

int is_full()
{
    if(top==n-1)
        return 1;
    return 0;
}

int is_empty()
{
    if(top==-1)
        return 1;
    return 0;
}

void main()
{
    int i,j,x,count=0;

    printf("Enter the number of vertices:");
    scanf("%d",&n);

    printf("Enter the adjacency matrix\n");

    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&G[i][j]);
        }
    }

    for(i=0;i<n;i++)
        visited[i]=0;

    DFS1(0);
    transpose();
    for(i=0;i<n;i++)
    {
        visited[i]=0;
    }

    for(i=0;i<n;i++)
    {
        x=pop();
        if(visited[i]!=1)
        {
            count++;
            DFS2(x);
        }
    }

    printf("\nThe number of strongly connected components are: %d",count);
}

void DFS1(int v)
{
   int i;
   push(v);
   visited[v]=1;

   for(i=0;i<n;i++)
   {
       if(G[v][i]==1 && visited[i]==0)
       {
           DFS1(i);
       }
   }
}

void DFS2(int v)
{
   int i;

   visited[v]=1;

   for(i=0;i<n;i++)
   {
       if(G[v][i]==1 && visited[i]==0)
       {
           DFS2(i);
       }
   }
}

void transpose()
{
    int i,j;
    {
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                G1[i][j]=G[j][i];
            }
        }
    }
}

